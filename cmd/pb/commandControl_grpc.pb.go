// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: commandControl.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CommandControl_Login_FullMethodName        = "/CommandControl/Login"
	CommandControl_GetDevices_FullMethodName   = "/CommandControl/GetDevices"
	CommandControl_UpdateDevice_FullMethodName = "/CommandControl/UpdateDevice"
	CommandControl_CreateZone_FullMethodName   = "/CommandControl/CreateZone"
	CommandControl_UpdateZone_FullMethodName   = "/CommandControl/UpdateZone"
	CommandControl_DeleteZone_FullMethodName   = "/CommandControl/DeleteZone"
	CommandControl_GetZones_FullMethodName     = "/CommandControl/GetZones"
	CommandControl_GetZone_FullMethodName      = "/CommandControl/GetZone"
)

// CommandControlClient is the client API for CommandControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandControlClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	GetDevices(ctx context.Context, in *None, opts ...grpc.CallOption) (*Devices, error)
	UpdateDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*None, error)
	CreateZone(ctx context.Context, in *Zone, opts ...grpc.CallOption) (*Zones, error)
	UpdateZone(ctx context.Context, in *Zone, opts ...grpc.CallOption) (*Zone, error)
	DeleteZone(ctx context.Context, in *Zone, opts ...grpc.CallOption) (*None, error)
	GetZones(ctx context.Context, in *None, opts ...grpc.CallOption) (*Zones, error)
	GetZone(ctx context.Context, in *ZoneRequest, opts ...grpc.CallOption) (*Zone, error)
}

type commandControlClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandControlClient(cc grpc.ClientConnInterface) CommandControlClient {
	return &commandControlClient{cc}
}

func (c *commandControlClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, CommandControl_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandControlClient) GetDevices(ctx context.Context, in *None, opts ...grpc.CallOption) (*Devices, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Devices)
	err := c.cc.Invoke(ctx, CommandControl_GetDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandControlClient) UpdateDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*None, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(None)
	err := c.cc.Invoke(ctx, CommandControl_UpdateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandControlClient) CreateZone(ctx context.Context, in *Zone, opts ...grpc.CallOption) (*Zones, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Zones)
	err := c.cc.Invoke(ctx, CommandControl_CreateZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandControlClient) UpdateZone(ctx context.Context, in *Zone, opts ...grpc.CallOption) (*Zone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Zone)
	err := c.cc.Invoke(ctx, CommandControl_UpdateZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandControlClient) DeleteZone(ctx context.Context, in *Zone, opts ...grpc.CallOption) (*None, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(None)
	err := c.cc.Invoke(ctx, CommandControl_DeleteZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandControlClient) GetZones(ctx context.Context, in *None, opts ...grpc.CallOption) (*Zones, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Zones)
	err := c.cc.Invoke(ctx, CommandControl_GetZones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandControlClient) GetZone(ctx context.Context, in *ZoneRequest, opts ...grpc.CallOption) (*Zone, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Zone)
	err := c.cc.Invoke(ctx, CommandControl_GetZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandControlServer is the server API for CommandControl service.
// All implementations must embed UnimplementedCommandControlServer
// for forward compatibility
type CommandControlServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	GetDevices(context.Context, *None) (*Devices, error)
	UpdateDevice(context.Context, *Device) (*None, error)
	CreateZone(context.Context, *Zone) (*Zones, error)
	UpdateZone(context.Context, *Zone) (*Zone, error)
	DeleteZone(context.Context, *Zone) (*None, error)
	GetZones(context.Context, *None) (*Zones, error)
	GetZone(context.Context, *ZoneRequest) (*Zone, error)
	mustEmbedUnimplementedCommandControlServer()
}

// UnimplementedCommandControlServer must be embedded to have forward compatible implementations.
type UnimplementedCommandControlServer struct {
}

func (UnimplementedCommandControlServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedCommandControlServer) GetDevices(context.Context, *None) (*Devices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedCommandControlServer) UpdateDevice(context.Context, *Device) (*None, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedCommandControlServer) CreateZone(context.Context, *Zone) (*Zones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateZone not implemented")
}
func (UnimplementedCommandControlServer) UpdateZone(context.Context, *Zone) (*Zone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateZone not implemented")
}
func (UnimplementedCommandControlServer) DeleteZone(context.Context, *Zone) (*None, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteZone not implemented")
}
func (UnimplementedCommandControlServer) GetZones(context.Context, *None) (*Zones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZones not implemented")
}
func (UnimplementedCommandControlServer) GetZone(context.Context, *ZoneRequest) (*Zone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZone not implemented")
}
func (UnimplementedCommandControlServer) mustEmbedUnimplementedCommandControlServer() {}

// UnsafeCommandControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandControlServer will
// result in compilation errors.
type UnsafeCommandControlServer interface {
	mustEmbedUnimplementedCommandControlServer()
}

func RegisterCommandControlServer(s grpc.ServiceRegistrar, srv CommandControlServer) {
	s.RegisterService(&CommandControl_ServiceDesc, srv)
}

func _CommandControl_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandControlServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandControl_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandControlServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandControl_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(None)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandControlServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandControl_GetDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandControlServer).GetDevices(ctx, req.(*None))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandControl_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandControlServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandControl_UpdateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandControlServer).UpdateDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandControl_CreateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Zone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandControlServer).CreateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandControl_CreateZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandControlServer).CreateZone(ctx, req.(*Zone))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandControl_UpdateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Zone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandControlServer).UpdateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandControl_UpdateZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandControlServer).UpdateZone(ctx, req.(*Zone))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandControl_DeleteZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Zone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandControlServer).DeleteZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandControl_DeleteZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandControlServer).DeleteZone(ctx, req.(*Zone))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandControl_GetZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(None)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandControlServer).GetZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandControl_GetZones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandControlServer).GetZones(ctx, req.(*None))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandControl_GetZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandControlServer).GetZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandControl_GetZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandControlServer).GetZone(ctx, req.(*ZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommandControl_ServiceDesc is the grpc.ServiceDesc for CommandControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CommandControl",
	HandlerType: (*CommandControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _CommandControl_Login_Handler,
		},
		{
			MethodName: "GetDevices",
			Handler:    _CommandControl_GetDevices_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _CommandControl_UpdateDevice_Handler,
		},
		{
			MethodName: "CreateZone",
			Handler:    _CommandControl_CreateZone_Handler,
		},
		{
			MethodName: "UpdateZone",
			Handler:    _CommandControl_UpdateZone_Handler,
		},
		{
			MethodName: "DeleteZone",
			Handler:    _CommandControl_DeleteZone_Handler,
		},
		{
			MethodName: "GetZones",
			Handler:    _CommandControl_GetZones_Handler,
		},
		{
			MethodName: "GetZone",
			Handler:    _CommandControl_GetZone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commandControl.proto",
}
