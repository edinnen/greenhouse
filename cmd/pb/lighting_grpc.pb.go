// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: lighting.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LightingClient is the client API for Lighting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LightingClient interface {
	SetState(ctx context.Context, in *Light, opts ...grpc.CallOption) (*Light, error)
	GetState(ctx context.Context, in *Light, opts ...grpc.CallOption) (*Light, error)
}

type lightingClient struct {
	cc grpc.ClientConnInterface
}

func NewLightingClient(cc grpc.ClientConnInterface) LightingClient {
	return &lightingClient{cc}
}

func (c *lightingClient) SetState(ctx context.Context, in *Light, opts ...grpc.CallOption) (*Light, error) {
	out := new(Light)
	err := c.cc.Invoke(ctx, "/Lighting/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightingClient) GetState(ctx context.Context, in *Light, opts ...grpc.CallOption) (*Light, error) {
	out := new(Light)
	err := c.cc.Invoke(ctx, "/Lighting/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LightingServer is the server API for Lighting service.
// All implementations must embed UnimplementedLightingServer
// for forward compatibility
type LightingServer interface {
	SetState(context.Context, *Light) (*Light, error)
	GetState(context.Context, *Light) (*Light, error)
	mustEmbedUnimplementedLightingServer()
}

// UnimplementedLightingServer must be embedded to have forward compatible implementations.
type UnimplementedLightingServer struct {
}

func (UnimplementedLightingServer) SetState(context.Context, *Light) (*Light, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedLightingServer) GetState(context.Context, *Light) (*Light, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedLightingServer) mustEmbedUnimplementedLightingServer() {}

// UnsafeLightingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LightingServer will
// result in compilation errors.
type UnsafeLightingServer interface {
	mustEmbedUnimplementedLightingServer()
}

func RegisterLightingServer(s grpc.ServiceRegistrar, srv LightingServer) {
	s.RegisterService(&Lighting_ServiceDesc, srv)
}

func _Lighting_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Light)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightingServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Lighting/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightingServer).SetState(ctx, req.(*Light))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lighting_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Light)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightingServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Lighting/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightingServer).GetState(ctx, req.(*Light))
	}
	return interceptor(ctx, in, info, handler)
}

// Lighting_ServiceDesc is the grpc.ServiceDesc for Lighting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lighting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Lighting",
	HandlerType: (*LightingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetState",
			Handler:    _Lighting_SetState_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _Lighting_GetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lighting.proto",
}
