// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreenhouseClient is the client API for Greenhouse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreenhouseClient interface {
	GetState(ctx context.Context, in *State, opts ...grpc.CallOption) (*State, error)
	SetState(ctx context.Context, in *State, opts ...grpc.CallOption) (*State, error)
	Watered(ctx context.Context, in *WaterRequest, opts ...grpc.CallOption) (*WaterRequest, error)
	GetTimeseries(ctx context.Context, in *TimeseriesRequest, opts ...grpc.CallOption) (*Timeseries, error)
}

type greenhouseClient struct {
	cc grpc.ClientConnInterface
}

func NewGreenhouseClient(cc grpc.ClientConnInterface) GreenhouseClient {
	return &greenhouseClient{cc}
}

func (c *greenhouseClient) GetState(ctx context.Context, in *State, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/Greenhouse/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greenhouseClient) SetState(ctx context.Context, in *State, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/Greenhouse/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greenhouseClient) Watered(ctx context.Context, in *WaterRequest, opts ...grpc.CallOption) (*WaterRequest, error) {
	out := new(WaterRequest)
	err := c.cc.Invoke(ctx, "/Greenhouse/Watered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greenhouseClient) GetTimeseries(ctx context.Context, in *TimeseriesRequest, opts ...grpc.CallOption) (*Timeseries, error) {
	out := new(Timeseries)
	err := c.cc.Invoke(ctx, "/Greenhouse/GetTimeseries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreenhouseServer is the server API for Greenhouse service.
// All implementations must embed UnimplementedGreenhouseServer
// for forward compatibility
type GreenhouseServer interface {
	GetState(context.Context, *State) (*State, error)
	SetState(context.Context, *State) (*State, error)
	Watered(context.Context, *WaterRequest) (*WaterRequest, error)
	GetTimeseries(context.Context, *TimeseriesRequest) (*Timeseries, error)
	mustEmbedUnimplementedGreenhouseServer()
}

// UnimplementedGreenhouseServer must be embedded to have forward compatible implementations.
type UnimplementedGreenhouseServer struct {
}

func (UnimplementedGreenhouseServer) GetState(context.Context, *State) (*State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedGreenhouseServer) SetState(context.Context, *State) (*State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedGreenhouseServer) Watered(context.Context, *WaterRequest) (*WaterRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Watered not implemented")
}
func (UnimplementedGreenhouseServer) GetTimeseries(context.Context, *TimeseriesRequest) (*Timeseries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeseries not implemented")
}
func (UnimplementedGreenhouseServer) mustEmbedUnimplementedGreenhouseServer() {}

// UnsafeGreenhouseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreenhouseServer will
// result in compilation errors.
type UnsafeGreenhouseServer interface {
	mustEmbedUnimplementedGreenhouseServer()
}

func RegisterGreenhouseServer(s grpc.ServiceRegistrar, srv GreenhouseServer) {
	s.RegisterService(&Greenhouse_ServiceDesc, srv)
}

func _Greenhouse_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreenhouseServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greenhouse/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreenhouseServer).GetState(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greenhouse_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreenhouseServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greenhouse/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreenhouseServer).SetState(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greenhouse_Watered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreenhouseServer).Watered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greenhouse/Watered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreenhouseServer).Watered(ctx, req.(*WaterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greenhouse_GetTimeseries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeseriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreenhouseServer).GetTimeseries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greenhouse/GetTimeseries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreenhouseServer).GetTimeseries(ctx, req.(*TimeseriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greenhouse_ServiceDesc is the grpc.ServiceDesc for Greenhouse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greenhouse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Greenhouse",
	HandlerType: (*GreenhouseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _Greenhouse_GetState_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _Greenhouse_SetState_Handler,
		},
		{
			MethodName: "Watered",
			Handler:    _Greenhouse_Watered_Handler,
		},
		{
			MethodName: "GetTimeseries",
			Handler:    _Greenhouse_GetTimeseries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greenhouse.proto",
}
