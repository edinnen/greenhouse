// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IrrigationClient is the client API for Irrigation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IrrigationClient interface {
	GetState(ctx context.Context, in *IrrigationRequest, opts ...grpc.CallOption) (*Irrigator, error)
	SetState(ctx context.Context, in *Irrigator, opts ...grpc.CallOption) (*Irrigator, error)
}

type irrigationClient struct {
	cc grpc.ClientConnInterface
}

func NewIrrigationClient(cc grpc.ClientConnInterface) IrrigationClient {
	return &irrigationClient{cc}
}

func (c *irrigationClient) GetState(ctx context.Context, in *IrrigationRequest, opts ...grpc.CallOption) (*Irrigator, error) {
	out := new(Irrigator)
	err := c.cc.Invoke(ctx, "/Irrigation/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *irrigationClient) SetState(ctx context.Context, in *Irrigator, opts ...grpc.CallOption) (*Irrigator, error) {
	out := new(Irrigator)
	err := c.cc.Invoke(ctx, "/Irrigation/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IrrigationServer is the server API for Irrigation service.
// All implementations must embed UnimplementedIrrigationServer
// for forward compatibility
type IrrigationServer interface {
	GetState(context.Context, *IrrigationRequest) (*Irrigator, error)
	SetState(context.Context, *Irrigator) (*Irrigator, error)
	mustEmbedUnimplementedIrrigationServer()
}

// UnimplementedIrrigationServer must be embedded to have forward compatible implementations.
type UnimplementedIrrigationServer struct {
}

func (UnimplementedIrrigationServer) GetState(context.Context, *IrrigationRequest) (*Irrigator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedIrrigationServer) SetState(context.Context, *Irrigator) (*Irrigator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedIrrigationServer) mustEmbedUnimplementedIrrigationServer() {}

// UnsafeIrrigationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IrrigationServer will
// result in compilation errors.
type UnsafeIrrigationServer interface {
	mustEmbedUnimplementedIrrigationServer()
}

func RegisterIrrigationServer(s grpc.ServiceRegistrar, srv IrrigationServer) {
	s.RegisterService(&Irrigation_ServiceDesc, srv)
}

func _Irrigation_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IrrigationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IrrigationServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Irrigation/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IrrigationServer).GetState(ctx, req.(*IrrigationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Irrigation_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Irrigator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IrrigationServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Irrigation/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IrrigationServer).SetState(ctx, req.(*Irrigator))
	}
	return interceptor(ctx, in, info, handler)
}

// Irrigation_ServiceDesc is the grpc.ServiceDesc for Irrigation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Irrigation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Irrigation",
	HandlerType: (*IrrigationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _Irrigation_GetState_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _Irrigation_SetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "irrigation.proto",
}
